quantile_f = function(X,q){
# Use empirical distribution curve
#quantile(X,q,na.rm=T, type=1)
# Nth element, rounding down (Hammarstrom)
sort(X)[(q*length(X))]
}
x = rnorm(1000)
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t1 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t2 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
t1==t2
sum(t1==t2)
sum(t1==t2,na.rm=T)
quantile_f(x,0.95)
quantile(x,0.95,type=1)
quantile_f(x,0.95) == quantile(x,0.95,type=1)
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t2 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
sum(t1==t2,na.rm=T)
t1==t2
quantile_f(x,0.94) == quantile(x,0.95,type=1)
quantile_f(x,0.94) == quantile(x,0.93,type=1)
quantile_f(x,0.94) == quantile(x,0.94,type=1)
t1[95]
t2[95]
t2[96]
t2[93]
t2[94]
t2[95]
sum(t1>t2)
sum(t1>t2,na.rm=T)
sum(t1<t2,na.rm=T)
d = read.csv("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt")
d = read.csv("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F)
head(d)
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t')
head(d)
d$V3
d$V3
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t')
strsplit(d$V3,",")
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t',stringsAsFactors = F)
strsplit(d$V3,",")
as.numeric(strsplit(d$V3,","))
sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
head(d)
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
d$V1
plot(sig[1],lin[1])
sig = sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
plot(sig[1],lin[1])
sig[1]
plot(sig[[1]],lin[[1]])
plot(c(800,550),c(0,1000),col='white')
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[1]],lin[[1]])
}
sig = sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[i]],lin[[i]])
}
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[i]],lin[[i]][1:length(sig[[1]])])
}
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
sig
lin
max(lin)
x
y
points(x,y)
plot(c(0,2000),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
plot(c(0,2300),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
plot(c(0,2500),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
hist(x)
hist(y)
d = read.csv("/Users/sgroberts/Documents/Conferences/Evolang11/GenderCheck/DecisionsTracker - Sheet1.csv",stringsAsFactors=F)
head(d)
table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
d[d$FirstAuthorGender=='',]
d = read.csv("/Users/sgroberts/Documents/Conferences/Evolang11/GenderCheck/DecisionsTracker - Sheet1.csv",stringsAsFactors=F)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x
x[1] = x[1]+3
x/sum(x)
table(d$FirstAuthorGender)
pool = table(d$FirstAuthorGender)
pool/sum(pool)
x[1]/pool[1]
x[2]/pool[2]
9:16/16
x  9:16/16
x  =9:16/16
names(x) = 9:16
x
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,4))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,4))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,2))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz~dx$physpos)
}
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep=\t,stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup
auth[! auth%in% signedup]
sum(auth%in% signedup)
sum(auth%in% signedup[,1])
sum(auth[,1]%in% signedup[,1])
sum(auth[,1] %in% signedup[,1])
auth[,1]
sum(auth[,2]%in% signedup[,1])
auth[! auth[,2]%in% signedup[,1]]
auth[! auth[,2]%in% signedup[,1],2]
x = rbind(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
signedup[,1]
auth[! auth[,2]%in% signedup[,1],2]
x = c(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt")
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F)
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F, quote=F)
for(p in c("knitr","rmarkdown","lme4","ggplot2","usdm","party","plyr","ade4","ecodist","vegan","lattice","cwhmisc","ape","adegenet","pegas","MASS","caper","geiger","nlme","phytools")){install.packages(p)}
install.packages("arm")
install.packages("rethinking")
install.packages("rethinking")
install.packages(c('devtools','coda','mvtnorm'))
library(devtools)
install_github("rmcelreath/rethinking")
library(cwhmisc)
library(lme4)
?lmer()
?lmerControl
w = 152.4
h = 228.6
l = 0
t = 0
bp2mm = 2.83467
w*bp2mm
h*bp2mm
l *bp2mm
t *bp2mm
paste( "'", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "'",
sep = '')
w = 152.4
h = 228.6
l = 40
t = 50
bp2mm = 2.83467
paste( "pdfcrop --margin '", w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margin '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --bbox '",
w*bp2mm, " ",
h*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
l*bp2mm, " ",
t*bp2mm," ",
l *bp2mm, " ",
t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l
t
-l*bp2mm
595 * (1/2.83467)
l
w0 - (2*l)
paste( "pdfcrop --bbox '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l*bp2mm
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '0 0 0 0' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0,0,w0*bp2mm,h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.35
h = 228.55
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
library(ape)
rtree(10)
t = rtree(10)
d = matrix(rnorm(100),nrow=10)
t
plot(t)
d
d[upper.tri(d)] = d[lower.tri(d)]
diag(d) = 0
library(ecodist)
??patristic
vcov(t)
?vcov
library(gplots)
library(lattice)
library(ggplot2)
library(lme4)
library(party)
library(sjPlot)
library(lawstat)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# convert labels to English
finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
# load all trial data
alldatx = read.csv("../results/AllTrialData.csv",stringsAsFactors = F)
head(finalLangs)
tapply(finalLangs)
?grepl
finalLangs[finalLangs$Shape=="Round",]$Word
finalLangs[finalLangs$Shape=="Round",]$Gen
?tapply
tapply(
finalLangs[finalLangs$Shape=="Round",]$Word,
finalLangs[finalLangs$Shape=="Round",]$Gen,
function(X){grepl("r",X)}
)
tapply(
finalLangs[finalLangs$Shape=="Round",]$Word,
finalLangs[finalLangs$Shape=="Round",]$Gen,
function(X){sum(grepl("r",X))}
)
tapply(
finalLangs[finalLangs$Shape!="Round",]$Word,
finalLangs[finalLangs$Shape!="Round",]$Gen,
function(X){sum(grepl("r",X))}
)

image(dc2d)
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude,
rho = 0.1)
})
image(dc2d)
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude,
rho = 0.5)
})
image(dc2d)
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
image(dc2d)
dc2d ^0.5
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^0.5
image(dc2d)
numEastWest = 10
numNorthSouth = 4
mySocietyLongitude = 3
mySocietyLatitude = 2
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^0.5
image(dc2d)
numNorthSouth
numEastWest = 10
numNorthSouth = 4
mySocietyLongitude = 3
mySocietyLatitude = 2
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numNorthSouth) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^0.5
image(dc2d)
numEastWest = 10
numNorthSouth = 4
mySocietyLongitude = 3
mySocietyLatitude = 2
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numNorthSouth) - mySocietyLatitude,
(ew) - mySocietyLongitude)
})
dc2d = dc2d ^0.5
image(dc2d)
numEastWest = 10
numNorthSouth = 4
mySocietyLongitude = 3
mySocietyLatitude = 2
dc2d = sapply(1:numEastWest,function(ew){
dcauchy2d(
(1:numNorthSouth) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^0.5
image(dc2d)
numEastWest = 10
numNorthSouth = 4
mySocietyLongitude = 3
mySocietyLatitude = 2
dc2d = sapply(1:numNorthSouth,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^0.5
image(dc2d)
dc2d
sapply(list(1:3,1:3), print)
m
sample(m)
sample(m,1)
world = matrix(1:(6*4),ncol=6,nrow=4)
world
sampleWord(world)
probCauchey2D = function(world,mySocietyLongitude, mySocietyLatitude, scale = 0.5){
numEastWest = ncol(world)
numNorthSouth = nrow(world)
dc2d = sapply(1:numNorthSouth,function(ew){
dcauchy2d(
(1:numEastWest) - mySocietyLongitude,
(ew) - mySocietyLatitude)
})
dc2d = dc2d ^scale
dc2d
}
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:ncol(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(world,1,prob=probCauchey2D(world,j,i))
}
}
}
world = matrix(1:(6*4),ncol=6,nrow=4)
sampleWord(world)
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(world,1,prob=probCauchey2D(world,j,i))
}
}
}
world = matrix(1:(6*4),ncol=6,nrow=4)
sampleWord(world)
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(world,1,prob=probCauchey2D(world,j,i))
}
}
newWorld
}
sampleWord(world)
sampleWord(world)
sampleWord(world)
sampleWord(world, scale=0.01)
sampleWord(world, scale=0.9)
sampleWord(world, scale=0.9)
world
sample(world)
sample(world,1)
world = matrix(1:6,3,2)
world
sampleWord(world, scale=0.9)
sampleWord(world, scale=3)
sampleWord(world, scale=10)
sampleWord(world, scale=10)
world
world = matrix(1:(6*4),ncol=6,nrow=4)
image(probCauchey2D(world,2,3))
probCauchey2D(world,2,3)
image(probCauchey2D(world,2,3,scale=0.5))
image(probCauchey2D(world,2,3,scale=1))
image(probCauchey2D(world,2,3,scale=10))
sampleWord(world, scale=10)
world = matrix(1:(3*4),ncol=3,nrow=4)
image(probCauchey2D(world,2,3,scale=0.5))
image(probCauchey2D(world,2,3,scale=1))
sampleWord(world, scale=10)
world
sampleWord(world, scale=10)
sampleWord(world, scale=100)
world
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(
as.vector(world),1,
prob=as.vector(probCauchey2D(world,j,i)))
}
}
newWorld
}
# Should be even numbers of lat and long!
world = matrix(1:(3*4),ncol=3,nrow=4)
# visualise the probability for society at 2,3:
image(probCauchey2D(world,2,3,scale=0.5))
image(probCauchey2D(world,2,3,scale=1))
# Sample from the world
sampleWord(world, scale=100)
i = 2
j = 3
probCauchey2D(world,j,i)
probCauchey2D(world,j,i)
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(
as.vector(world),1,
prob=as.vector(probCauchey2D(world,j,i,scale=scale)))
}
}
newWorld
}
# Should be even numbers of lat and long!
world = matrix(1:(3*4),ncol=3,nrow=4)
# visualise the probability for society at 2,3:
image(probCauchey2D(world,2,3,scale=0.5))
image(probCauchey2D(world,2,3,scale=1))
# Sample from the world
sampleWord(world, scale=100)
world
sampleWord(world, scale=100)
sampleWord = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(
as.vector(t(world)),1,
prob=as.vector(probCauchey2D(world,j,i,scale=scale)))
}
}
newWorld
}
# Should be even numbers of lat and long!
world = matrix(1:(3*4),ncol=3,nrow=4)
# visualise the probability for society at 2,3:
image(probCauchey2D(world,2,3,scale=0.5))
image(probCauchey2D(world,2,3,scale=1))
# Sample from the world
sampleWord(world, scale=100)
world
sampleWord(world, scale=1)
sampleWord(world, scale=1)
sampleWord(world, scale=1)
plotWorld = function(m){
variants = sort(unique(as.vector(m)))
colx = rainbow(length(variants))
names(colx) = paste('c',sort(variants))
points = cbind(arrayInd(1:length(m),dim(m)),as.vector(m))
pointColours = colx[paste('c',points[,3])]
plot(points[,2],points[,1], col=pointColours, pch=15, cex=4, ylim=c(nrow(m),1),
xlab="",ylab="")
}
plotWorld(world)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest,numNorthSouth),ncol=numEastWest,nrow=nnumNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampelWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation2d(10,10,9)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=nnumNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampelWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation2d(10,10,9)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=nnumNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampelWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampelWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampleWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
sampleWorld = function(world,scale=0.5){
newWorld = world
for(i in 1:nrow(world)){
for(j in 1:ncol(world)){
newWorld[i,j] = sample(
as.vector(t(world)),1,
prob=as.vector(probCauchey2D(world,j,i,scale=scale)))
}
}
newWorld
}
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
for(i in 1:10){
plotWorld(world)
newWorld = sampleWorld(world)
world = newWorld
}
}
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
for(i in 1:numGen){
plotWorld(world)
newWorld = sampleWorld(world)
world = newWorld
}
}
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9)
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9,scale=10)
simulation.2d = function(numEastWest = 10, numNorthSouth = 10, numGen = 9, scale=0.5){
world = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
for(i in 1:numGen){
plotWorld(world)
newWorld = sampleWorld(world,scale)
world = newWorld
}
}
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
simulation.2d(10,10,9,scale=10)
simulation.2d = function(startingWorld, numGen = 9, scale=0.5){
world = startingWorld
for(i in 1:numGen){
plotWorld(world)
newWorld = sampleWorld(world,scale)
world = newWorld
}
}
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
numEastWest = 10
numNorthSouth = 10
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
simulation.2d(startingWorld,10,10,9*5,scale=1)
simulation.2d = function(startingWorld, numGen = 9, scale=0.5){
world = startingWorld
for(i in 1:numGen){
plotWorld(world)
newWorld = sampleWorld(world,scale)
world = newWorld
}
}
dev.off()
par(mfrow=c(3,3), mar=c(1,1,1,1))
numEastWest = 10
numNorthSouth = 10
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
simulation.2d(startingWorld,9*5,scale=1)
numEastWest = 10
numNorthSouth = 10
numGen = 5*5
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
simulation.2d(startingWorld,numGen,scale=1)
numEastWest = 10
numNorthSouth = 10
numGen = 5*5
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
simulation.2d(startingWorld,numGen,scale=10)
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
simulation.2d(startingWorld,numGen,scale=2)
plotWorld = function(m){
# Plot the map of the world, coloured by the variants
variants = sort(unique(as.vector(m)))
colx = rainbow(length(variants))
names(colx) = paste('c',sort(variants))
points = cbind(arrayInd(1:length(m),dim(m)),as.vector(m))
pointColours = colx[paste('c',points[,3])]
plot(points[,2],points[,1], col=pointColours, pch=15, cex=2, ylim=c(nrow(m),1),
xlab="",ylab="")
}
simulation.2d = function(startingWorld, numGen = 9, scale=0.5){
# A single generation change
world = startingWorld
for(i in 1:numGen){
plotWorld(world)
newWorld = sampleWorld(world,scale)
world = newWorld
}
}
numEastWest = 10
numNorthSouth = 10
numGen = 5*5
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
# Each grid is the whole world in a single generation
# Generations run in reading order: from left to right, then top to bottom (so last gen is in bottom right)
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
simulation.2d(startingWorld,numGen,scale=2)
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
simulation.2d(startingWorld,numGen,scale=3)
simulation.2d = function(startingWorld, numGen = 9, scale=0.5){
world = startingWorld
numVariants = 1:numGen
for(i in 1:numGen){
plotWorld(world)
# measure of variation (could use entropy)
numVariants[i] = length(unique(as.vector(world)))
# resample the world
newWorld = sampleWorld(world,scale)
# world is set to 'newWorld' for next generation
world = newWorld
}
# return the number of variants at each generation
return(numVariants)
}
numEastWest = 10
numNorthSouth = 10
numGen = 5*5
startingWorld = matrix(1:(numEastWest*numNorthSouth),ncol=numEastWest,nrow=numNorthSouth)
# Each grid is the whole world in a single generation
# Generations run in reading order: from left to right, then top to bottom (so last gen is in bottom right)
# The scale is quite high, so we should see a slow deterioration and spreading of more frequent variants
dev.off()
par(mfrow=c(5,5), mar=c(1,1,1,1))
s1 = simulation.2d(startingWorld,numGen,scale=3)
#plot the number of variants
plot(s1)
par(mfrow=c(1,1), mar=c(4,4,4,4))
plot(s1)
plot(s1, type='b')
s1 = simulation.2d(startingWorld,numGen,scale=3)
library(ngram)
library(gplots)
library(lme4)
library(party)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
predictSpikinessWithLMER = function(ratings.words){
m.words = lmer(RatingSpikiness~ Item + (1|Part), data=ratings.words)
#plot(ratings.words$RatingSpikiness,resid(m.words))
words = sort(unique(ratings.words$Item))
words.predictions = predict(m.words,newdata=data.frame(Item=words, Part=1), re.form=NULL)
names(words.predictions) = words
#cor(words.predictions, tapply(ratings.words$RatingSpikiness, ratings.words$Item, mean))
return(words.predictions)
}
ratings = read.delim("../data/ratings/SpikinessRatings", sep='\t', stringsAsFactors = F)
m0 = lmer(RatingSpikiness ~ Sex + Age + Likert + (1|Item)  + (1|Part), data=ratings)
summary(m0)
ratings.letters = ratings[nchar(ratings$Item)==1,]
ratings.words = ratings[nchar(ratings$Item)>1,]
letter.predictions = predictSpikinessWithLMER(ratings.letters)
words.predictions = predictSpikinessWithLMER(ratings.words)
letterRaingsOfWords = sapply(words, function(X){
mean(letter.predictions[strsplit(X,'')[[1]]])
})
plot(letterRaingsOfWords, words.predictions)
# Baseline for just using letters:
cor(letterRaingsOfWords, words.predictions)
###############
makeFeatureFrame = function(dx,ngrams){
r = matrix(nrow=nrow(dx), ncol=2+length(ngrams))
r[,1] = dx$Item
r[,2] = dx$RatingSpikiness
colnames(r) = c("Item","RatingSpikiness",ngrams)
for(i in 3:ncol(r)){
r[,i] = grepl(colnames(r)[i],r[,1])
}
r = as.data.frame(r)
for(i in 3:ncol(r)){
r[,i] = as.logical(r[,i])
}
return(r)
}
proportionOfDataInTrainingSet = 0.75
numberOfFolds = 20
maxNGram = 2
ngrams.all = unique(unlist(sapply(ratings$Item, function(X){
if(nchar(X)==1){
return(X)
}
unique(ngram_asweka(X,min=1,max=maxNGram,sep=''))
})))
rAll = makeFeatureFrame(ratings,ngrams.all)
rAll$RatingSpikiness = as.numeric(rAll$RatingSpikiness)
rAll.predictions = predictSpikinessWithLMER(ratings)
rAll = makeFeatureFrame(ratings[!duplicated(ratings$Item),],ngrams.all)
rAll$RatingSpikiness = rAll.predictions[rAll$Item]
cf.all = cforest(RatingSpikiness ~ . ,
data= rAll[,2:ncol(rAll)],
controls = cforest_control(mtry = 10))
tx =ctree(RatingSpikiness ~ ., data=rAll[,2:ncol(rAll)])
tx
plot(tx)
predict(tx)
plot(predict(tx),rAll$RatingSpikiness)
cor(predict(tx),rAll$RatingSpikiness)
dim(rAll)
rAll
names(rAll)

maxslope = max(abs(diffx))
# proportion of signal with zero velocity
propzero = sum(diffx<5) / lx
# numer of direction changes
switchDirection = sum(abs((diff(diffx>=0))))
if(sum(!is.na(sig))==0){
prop.time.plateau = -1
switches.between.sections = -1
steepness.sig.mean = -1
} else{
segment.times = as.factor(as.character(cut(sig,breaks = phys.breaks,labels=c('plateau','steep','plateau','steep','plateau'))))
prop.time.plateau = sum(segment.times=='plateau')/length(segment.times)
sections =  paste(as.character(cut(sig,breaks = phys.breaks,labels=c('a','','c','','e'))), collapse='')
contiguous.sections = gsub("([aec])\\1+","\\1",sections)
switches.between.sections = nchar(contiguous.sections)-1
steepness.sig.mean = -1
steepness.sig.mean.max = -1
if(get.steepness){
# work out mean signal steepness
steepness.x = steepness[[1 + (curvature*10)]]
steepness.sig = steepness.x[sig]
steepness.sig.mean = mean(steepness.sig,na.rm=T)
# Work out mean signal steepness, with steepenss
#  defined as the maximum curvature steepenss
#  (to normalise the measure over curvatures)
steepness.x.max = steepness[[length(steepness)]]
steepness.sig.max = steepness.x.max[sig]
steepness.sig.mean.max = mean(steepness.sig.max,na.rm=T)
}
}
return(c(lx,slope,propzero,switchDirection,maxslope,slope.move,slope.sd,prop.time.plateau,switches.between.sections,steepness.sig.mean,steepness.sig.mean.max))
}
nonlinearCurve = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
steepness = list()
cxs = sort(unique(nonlinearCurve$curvature))
for(i in 1:length(cxs)){
sx = diff(nonlinearCurve[nonlinearCurve$curvature==cxs[i],]$hz)
sx = sx- min(sx)
sx = sx/ max(sx)
lx = cut(1:length(sx),breaks=seq(0,length(sx)+1,length.out=1001))
sx2 = tapply(sx,lx,mean)
steepness[[i]] = sx2
}
log_Nij = loadLog(paste(base,"fluteilm_NIJMEGEN/",sep=''),"log/log1.csv")
plotLog(paste(base,"fluteilm_NIJMEGEN/",sep=''),log_Nij,"Facebook")
signals_Nij = processSignals(paste(base,"fluteilm_NIJMEGEN/",sep=''), log_Nij)
signals_Nij = signals_Nij[complete.cases(signals_Nij[,-which(names(signals_Nij)=="prop.time.plateau.hz")]),]
log_MT = loadLog(paste(base,"fluteilm/",sep=''),"log/log1.csv")
plotLog(paste(base,"fluteilm/",sep=''),log_MT,"MTurk")
signals_MT = processSignals(paste(base,"fluteilm/",sep=''),log_MT)
signals_MT = signals_MT[complete.cases(signals_MT[,-which(names(signals_MT)=="prop.time.plateau.hz")]),]
tapply(log_MT$genNum,paste(log_MT$logFile,log_MT$chain,log_MT$curvature), max)
table(log_MT$genNum,log_MT$curvature)
sum(table(log_MT$genNum,log_MT$curvature))
log_SONA = loadLog(paste(base,"fluteilm_SONA/",sep=''),"log/log1.csv")
plotLog(paste(base,"fluteilm_SONA/",sep=''),log_SONA,"SONA")
signals_SONA = processSignals(paste(base,"fluteilm_SONA/",sep=''), log_SONA)
signals_SONA = signals_SONA[complete.cases(signals_SONA[,-which(names(signals_SONA)%in%c("prop.time.plateau.hz",'slope.move.hz'))]),]
table(log_SONA$genNum,log_SONA$curvature)
signals_MT$prop.time.plateau[signals_MT$prop.time.plateau==-1]  = NA
signals_SONA$prop.time.plateau[signals_SONA$prop.time.plateau==-1]  = NA
signals_Nij$prop.time.plateau[signals_Nij$prop.time.plateau==-1]  = NA
signals_MT$steepness.sig.mean[signals_MT$steepness.sig.mean==-1]  = NA
signals_SONA$steepness.sig.mean[signals_SONA$steepness.sig.mean==-1]  = NA
signals_Nij$steepness.sig.mean[signals_Nij$steepness.sig.mean==-1]  = NA
signals_MT$rawDataSource = base
signals_SONA$rawDataSource = base
signals_Nij$rawDataSource = base
write.csv(signals_Nij,"Data/Signals_Nij.csv",row.names=F)
write.csv(signals_MT,"Data/Signals_MT.csv",row.names=F)
write.csv(signals_SONA,"Data/Signals_SONA.csv",row.names=F)
---
title: "Colour experiment"
output: pdf_document
---
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
# Load libraries
```{r}
library(ggplot2)
library(lme4)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
begin = 'There was no significant'
if(p <0.1){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
Transform some variables.
```{r}
variants$Teach = variants$Teach >0
variants$check.any = variants$check>0
variants$freq_week_1.logcenter = log(variants$freq_week_1 + 1)
variants$freq_week_1.logcenter =
variants$freq_week_1.logcenter - mean(variants$freq_week_1.logcenter)
# cut TryMarking into two categories
variants$TryMarked.cat = cut(variants$TryMarked,
c(-Inf,3,Inf),
labels = c("Low",'High'))
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
variants$averageLength_week_1.logcenter -
mean(variants$averageLength_week_1.logcenter)
```
---
title: "Colour experiment"
output: pdf_document
---
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
# Load libraries
```{r}
library(ggplot2)
library(lme4)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
begin = 'There was no significant'
if(p <0.1){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
Transform some variables.
```{r}
variants$Teach = variants$Teach >0
variants$check.any = variants$check>0
variants$freq_week_1.logcenter = log(variants$freq_week_1 + 1)
variants$freq_week_1.logcenter =
variants$freq_week_1.logcenter - mean(variants$freq_week_1.logcenter)
# cut TryMarking into two categories
variants$TryMarked.cat = cut(variants$TryMarked,
c(-Inf,3,Inf),
labels = c("Low",'High'))
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
variants$averageLength_week_1.logcenter -
mean(variants$averageLength_week_1.logcenter)
```
# Ctree
```{r}
ct =  ctree()
```
# LMER models
```{r modelBits}
m0 = lmer(freq_week_4_withinColour ~
1
+ (1 | colourName),
data=variants)
m1 = lmer(freq_week_4_withinColour ~
(indexical) +
+ (1 | colourName),
data=variants)
m2 = lmer(freq_week_4_withinColour ~
(indexical) +
(Teach)
+ (1 | colourName),
data=variants)
m3 = lmer(freq_week_4_withinColour ~
(indexical) +
(Teach) + (TryMarked.cat)
+ (1 | colourName),
data=variants)
m4 = lmer(freq_week_4_withinColour ~
(indexical) +
Teach * TryMarked.cat
+ (1 | colourName),
data=variants)
m5 = lmer(freq_week_4_withinColour ~
(indexical) +
(Teach * TryMarked.cat) +
freq_week_1.logcenter
+ (1 | colourName),
data=variants)
m6 = lmer(freq_week_4_withinColour ~
(indexical) +
(Teach * TryMarked.cat) +
freq_week_1.logcenter +
averageLength_week_1.logcenter
+ (1 | colourName),
data=variants)
m7 = lmer(freq_week_4_withinColour ~
(indexical) +
(Teach * TryMarked.cat) +
freq_week_1.logcenter +
averageLength_week_1.logcenter+
check.any
+ (1 | colourName),
data=variants)
```
# Results
```{r}
anova(m0,m1,m2,m3,m4,m5, m6,m7)
anova(m0,m1,m2,m3,m4,m5, m6,m7)
anova(m0,m1,m2,m3,m4,m5, m6,m7)
summary(m4)
ct =  ctree(freq_week_4_withinColour ~
(indexical) +
(Teach +TryMarked.cat) +
freq_week_1.logcenter +
averageLength_week_1.logcenter+
check.any, data=variants)
ct =  ctree(freq_week_4_withinColour ~
factor(indexical) +
(factor(Teach) +factor(TryMarked.cat)) +
freq_week_1.logcenter +
averageLength_week_1.logcenter+
factor(check.any), data=variants)
plot(ct)
library(gplots)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
datax = read.csv("../results/IncreaseInIconicity.csv", stringsAsFactors = F)
alldatx = read.csv("../results/AllTrialData.csv", stringsAsFactors = F)
hist(datax$increaseIconicity)
hist(datax[datax$condition=='Comm',]$increaseIconicity)
hist(datax[datax$condition=='Learn',]$increaseIconicity)
comm.innovation.iconicity.dist = datax[datax$condition=='Comm' & datax$Human,]$increaseIconicity
learn.innovation.iconicity.dist = datax[datax$condition=='Learn' & datax$Human,]$increaseIconicity
wilcox.test(comm.innovation.iconicity.dist)
wilcox.test(learn.innovation.iconicity.dist)
symmetry.test(comm.innovation.iconicity.dist)
symmetry.test(learn.innovation.iconicity.dist)
dens.comm = density(datax[datax$condition=='Comm' & datax$Human,]$increaseIconicity, adjust=1)
dens.learn = density(datax[datax$condition=='Learn' & datax$Human,]$increaseIconicity,adjust=1)
plot(dens.comm, main='', xlab='Change in iconicity')
lines(dens.learn, col=2)
abline(v=0)
plotmeans(increaseIconicity ~ paste(condition,isSpikyMeaning), data=datax, connect=list(1:2,3:4))
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"))
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Learn' & !alldatx$Human,], n.label = F)
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Comm',],add=T,col=2,barcol=2, n.label = F)
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Learn' & alldatx$trial.nr >102 & !alldatx$Human,])
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Comm' & alldatx$trial.nr >102,],add=T,col=2,barcol=2)
datax$condition = factor(datax$condition, levels=c("Learn","Comm"))
summary(lm(increaseIconicity ~ round+gen + condition*inFinalLang,data=datax))
plotmeans(increaseIconicity~gen, data=datax[datax$condition=='Comm' & datax$isSpikyMeaning==T & datax$inFinalLang,])
plotmeans(increaseIconicity~gen, data=datax[datax$condition=='Comm' & datax$isSpikyMeaning==F  & datax$inFinalLang,], add=T, col=2)
plotmeans(increaseIconicity ~ paste(condition, correctGuess), data = datax[datax$Human & datax$condition=="Comm",], ylim=ylimx, legends = c("Incorrect","Correct"),xlab='',ylab="Increase in iconicity")
par(mfrow=c(1,2))
ylimx = c(-0.045,0.045)
plotmeans(increaseIconicity ~ paste(condition, correctGuess), data = datax[datax$Human & datax$condition=="Comm",], ylim=ylimx, legends = c("Incorrect","Correct"),xlab='',ylab="Increase in iconicity")
title("Guessing Item")
abline(h=0)
plotmeans(increaseIconicity ~ paste(condition, correctSpikiness), data = datax[datax$Human& datax$condition=="Comm",], ylim=ylimx,legends = c("Incorrect","Correct"),xlab='',ylab="Increase in iconicity")
title("Guessing Shape")
abline(h=0)
dens.commS = density(datax[datax$condition=='Comm',]$systematicity.increase)
dens.learnS = density(datax[datax$condition=='Learn',]$systematicity.increase)
plot(dens.commS, main='', xlab='Change in iconicity')
lines(dens.learnS, col=2)
abline(v=0)
plot(datax$increaseIconicity,datax$systematicity.increase)
cor.test(datax$increaseIconicity,datax$systematicity.increase)
plot(datax[datax$condition=="Comm",]$increaseIconicity,datax[datax$condition=="Comm",]$systematicity.increase)
cor.test(datax[datax$condition=="Comm",]$increaseIconicity,datax[datax$condition=="Comm",]$systematicity.increase)
plot(datax[datax$condition=="Learn" & datax$Human,]$increaseIconicity,datax[datax$condition=="Learn" & datax$Human,]$systematicity.increase)
cor.test(datax[datax$condition=="Learn" & datax$Human,]$increaseIconicity,datax[datax$condition=="Learn" & datax$Human,]$systematicity.increase)
m0 = lmer(increaseIconicity~condition*gen + (1|chain) + (1|meaning), data = datax[datax$Human,])
---
title: "The interactive origin of iconiciy: Mixed effects models"
output:
pdf_document:
toc: true
---
\newpage
# Introduction
This file contains an analysis of the spikiness ratings of the final output languages and the accuracy of guessing during the experiments.  The spikiness ratings are not bimodally disributed, so the analysis of spikiness ratings is done using both the continuous spikiness rating values and a binarised version of the ratings.
Note that in the main text, we refer to the two conditions as "communication" and "reproduction", while the data is coded as "communication" and "learning".
# Spikiness ratings
## Load libraries
```{r message=FALSE, warning=FALSE}
library(gplots)
library(lattice)
library(ggplot2)
library(lme4)
library(party)
library(sjPlot)
library(lawstat)
```
```{r echo=F}
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
getMEText = function(r,ef, wald=NULL){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
begin = 'There was no significant'
if(p <0.1){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
## Load data
```{r}
finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# convert labels to English
finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
# load all trial data
alldatx = read.csv("../results/AllTrialData.csv",stringsAsFactors = F)
```
Center spikiness ratings and re-level factors.
```{r}
finalLangs$RatedSpikiness.center =
finalLangs$RatedSpikiness- mean(finalLangs$RatedSpikiness)
finalLangs$Cond = factor(finalLangs$Cond, levels=c("Learn","Communication"))
finalLangs$Shape = factor(finalLangs$Shape, levels=c("Round","Spiky"))
comm.innovation.iconicity.dist =
datax[datax$condition=='Comm' & datax$Human,]$increaseIconicity
# innovations produced by the human in the reproduction condition
learn.innovation.iconicity.dist =
datax[datax$condition=='Learn' & datax$Human,]$increaseIconicity
cols = c('#1b9e77','#d95f02')
hist(comm.innovation.iconicity.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(learn.innovation.iconicity.dist,
add=T,
col=cols[2],
breaks=14,
border = cols[2])
comm.innovation.iconicity.survived.dist =
datax[datax$condition=='Comm' & datax$Human & datax$inFinalLang,]$increaseIconicity
comm.innovation.iconicity.rejected.dist =
datax[datax$condition=='Comm' & datax$Human & !datax$inFinalLang,]$increaseIconicity
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity", add=T)
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity", add=T)
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[2],
main='',
xlab="Change in iconicity", add=T)
dens.commSurvive = density(comm.innovation.iconicity.survived.dist)
dens.commReject = density(comm.innovation.iconicity.rejected.dist)
plot(dens.commSurvive, main='', xlab='Change in iconicity')
lines(dens.commReject, col=2)
abline(v=0)
dens.commSurvive = density(comm.innovation.iconicity.survived.dist)
dens.commReject = density(comm.innovation.iconicity.rejected.dist)
plot(dens.commSurvive, main='', xlab='Change in iconicity')
lines(dens.commReject, col=2)
abline(v=0)
comm.innovation.iconicity.rejected.dist
comm.innovation.iconicity.survived.dist
comm.innovation.iconicity.survived.dist =
datax[datax$condition=='Comm' & datax$Human & datax$inFinalLang,]$increaseIconicity
comm.innovation.iconicity.rejected.dist =
datax[datax$condition=='Comm' & datax$Human & !datax$inFinalLang,]$increaseIconicity
cols = c('#1b9e77','#d95f02')
dens.commSurvive = density(comm.innovation.iconicity.survived.dist)
dens.commReject = density(comm.innovation.iconicity.rejected.dist)
plot(dens.commSurvive, main='', xlab='Change in iconicity')
lines(dens.commReject, col=2)
abline(v=0)
par(mfrow=c(1,2))
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"))
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(systematicity.increase ~ paste(condition, inFinalLang), data = datax[datax$Human,], connect = list(1:2,3:4), xlab='', ylab="Increase",, legends = c("Rejected","Survived","Rejected","Survived"))
title(main="Systematicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"))
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1])
colsppt = c("#288F62","#CF4A08")
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1])
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1], barcol = colsppt[1])
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1], barcol = colsppt[1], lwd=2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1], barcol = colsppt[1], barwidth = 2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt[1], pch=16, ccol = colsppt[1], barcol = colsppt[1], barwidth = 2, lwd = 2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[1], barcol = colsppt[1], barwidth = 2)
colsppt = c("#288F62","#288F62","#CF4A08","#CF4A08")
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[1], barcol = colsppt[1], barwidth = 2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt, barcol = colsppt[1], barwidth = 2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[c(1,3)], barcol = colsppt[1], barwidth = 2)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[c(1,3)], barcol = colsppt, barwidth = 2)
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[c(1,3)], barcol = colsppt, barwidth = 2)
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[c(1,3)], barcol = colsppt, barwidth = 2, n.label = F)
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)

" (",
round(dx[dx$Item==order[i],]$RatedSpikiness,2),
")", sep='')
plot(-1:1,-1:1,type='n',
xlab='',ylab='',
bty='n', xaxt='n',yaxt='n',
main=labelx)
lim <- par()
imagex = readPNG(paste("../data/images/",order[i],".png",sep=''))
rasterImage(imagex, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
}
dev.off()
}
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==0,]
makeExampleGrid(dx, '../results/graphs/examples/Gen0.pdf')
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Communication.pdf')
dx = finalLangs[finalLangs$Cond=="Learn" & finalLangs$Chain==6 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Learn.pdf')
ratings = read.delim("../data/ratings/SpikinessRatings", sep='\t', stringsAsFactors = F)
max(ratings$Age)
min(ratings$Age)
table(ratings$Sex) / nrow(ratings)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
library(png)
library(XLConnect)
# finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# # convert labels to English
# finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
# finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
#
# finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
# finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
#
# sort(tapply(finalLangs$RatedSpikiness2, paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen),mean))
finalLangs <- readWorksheetFromFile("../data/finalLanguages/FinalLanguages.xlsx", sheet=1)
finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
finalLangs$filenames = paste(finalLangs$Item, ".png",sep='')
finalLangs$chaingen = paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen)
sort(tapply(finalLangs[finalLangs$Gen==6,]$RatedSpikiness2, finalLangs[finalLangs$Gen==6,]$chaingen,mean))
sort(tapply(finalLangs$RatedSpikiness2[finalLangs$Gen==0], paste(finalLangs$Cond[finalLangs$Gen==0],finalLangs$Chain[finalLangs$Gen==0],finalLangs$Gen[finalLangs$Gen==0]),mean))
# make language string and figure out if the same input lang is used for two chains?
finalLangs = finalLangs[order(finalLangs$Item),]
max(sort(table(tapply(finalLangs$Word, finalLangs$chaingen, paste, collapse=' '))))
makeExampleGrid = function(dx, filename){
order = c("RoundRed","RoundRedThick",'SpikyRed','SpikyRedThick',
"RoundGreen","RoundGreenThick",'SpikyGreen','SpikyGreenThick',
"RoundBlue","RoundBlueThick",'SpikyBlue','SpikyBlueThick')
scalex = 0.5
pdf(filename, width=14*scalex , height=8*scalex )
par(mfrow=c(3,4), mar=c(1,1,2,1))
for(i in 1:length(order)){
labelx = paste(dx[dx$Item==order[i],]$Word,
" (",
round(dx[dx$Item==order[i],]$RatedSpikiness,2),
")", sep='')
plot(-1:1,-1:1,type='n',
xlab='',ylab='',
bty='n', xaxt='n',yaxt='n',
main=labelx)
lim <- par()
imagex = readPNG(paste("../data/images/",order[i],".png",sep=''))
rasterImage(imagex, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
}
dev.off()
}
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==0,]
makeExampleGrid(dx, '../results/graphs/examples/Gen0.pdf')
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Communication.pdf')
dx = finalLangs[finalLangs$Cond=="Learn" & finalLangs$Chain==6 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Learn.pdf')
ratings = read.delim("../data/ratings/SpikinessRatings", sep='\t', stringsAsFactors = F)
max(ratings$Age)
min(ratings$Age)
table(ratings$Sex) / nrow(ratings)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
library(png)
library(XLConnect)
# finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# # convert labels to English
# finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
# finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
#
# finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
# finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
#
# sort(tapply(finalLangs$RatedSpikiness2, paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen),mean))
finalLangs <- readWorksheetFromFile("../data/finalLanguages/FinalLanguages.xlsx", sheet=1)
finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
finalLangs$filenames = paste(finalLangs$Item, ".png",sep='')
finalLangs$chaingen = paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen)
sort(tapply(finalLangs[finalLangs$Gen==6,]$RatedSpikiness2, finalLangs[finalLangs$Gen==6,]$chaingen,mean))
sort(tapply(finalLangs$RatedSpikiness2[finalLangs$Gen==0], paste(finalLangs$Cond[finalLangs$Gen==0],finalLangs$Chain[finalLangs$Gen==0],finalLangs$Gen[finalLangs$Gen==0]),mean))
# make language string and figure out if the same input lang is used for two chains?
finalLangs = finalLangs[order(finalLangs$Item),]
max(sort(table(tapply(finalLangs$Word, finalLangs$chaingen, paste, collapse=' '))))
makeExampleGrid = function(dx, filename){
order = c("RoundRed","RoundRedThick",'SpikyRed','SpikyRedThick',
"RoundGreen","RoundGreenThick",'SpikyGreen','SpikyGreenThick',
"RoundBlue","RoundBlueThick",'SpikyBlue','SpikyBlueThick')
scalex = 0.5
pdf(filename, width=12*scalex , height=8*scalex )
par(mfrow=c(3,4), mar=c(1,1,2,1))
for(i in 1:length(order)){
labelx = paste(dx[dx$Item==order[i],]$Word,
" (",
round(dx[dx$Item==order[i],]$RatedSpikiness,2),
")", sep='')
plot(-1:1,-1:1,type='n',
xlab='',ylab='',
bty='n', xaxt='n',yaxt='n',
main=labelx)
lim <- par()
imagex = readPNG(paste("../data/images/",order[i],".png",sep=''))
rasterImage(imagex, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
}
dev.off()
}
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==0,]
makeExampleGrid(dx, '../results/graphs/examples/Gen0.pdf')
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Communication.pdf')
dx = finalLangs[finalLangs$Cond=="Learn" & finalLangs$Chain==6 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Learn.pdf')
ratings = read.delim("../data/ratings/SpikinessRatings", sep='\t', stringsAsFactors = F)
max(ratings$Age)
min(ratings$Age)
table(ratings$Sex) / nrow(ratings)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
library(png)
library(XLConnect)
# finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# # convert labels to English
# finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
# finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
#
# finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
# finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
#
# sort(tapply(finalLangs$RatedSpikiness2, paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen),mean))
finalLangs <- readWorksheetFromFile("../data/finalLanguages/FinalLanguages.xlsx", sheet=1)
finalLangs$RatedSpikiness2 = finalLangs$RatedSpikiness
finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2 = 5 - finalLangs[finalLangs$Shape=="Round",]$RatedSpikiness2
finalLangs$filenames = paste(finalLangs$Item, ".png",sep='')
finalLangs$chaingen = paste(finalLangs$Cond,finalLangs$Chain,finalLangs$Gen)
sort(tapply(finalLangs[finalLangs$Gen==6,]$RatedSpikiness2, finalLangs[finalLangs$Gen==6,]$chaingen,mean))
sort(tapply(finalLangs$RatedSpikiness2[finalLangs$Gen==0], paste(finalLangs$Cond[finalLangs$Gen==0],finalLangs$Chain[finalLangs$Gen==0],finalLangs$Gen[finalLangs$Gen==0]),mean))
# make language string and figure out if the same input lang is used for two chains?
finalLangs = finalLangs[order(finalLangs$Item),]
max(sort(table(tapply(finalLangs$Word, finalLangs$chaingen, paste, collapse=' '))))
makeExampleGrid = function(dx, filename){
order = c("RoundRed","RoundRedThick",'SpikyRed','SpikyRedThick',
"RoundGreen","RoundGreenThick",'SpikyGreen','SpikyGreenThick',
"RoundBlue","RoundBlueThick",'SpikyBlue','SpikyBlueThick')
scalex = 0.5
pdf(filename, width=12*scalex , height=8*scalex )
par(mfrow=c(3,4), mar=c(1,1,2,1))
for(i in 1:length(order)){
labelx = paste(dx[dx$Item==order[i],]$Word,
" (",
round(dx[dx$Item==order[i],]$RatedSpikiness,2),
")", sep='')
plot(-1:1,-1:1,type='n',
xlab='',ylab='',
bty='n', xaxt='n',yaxt='n',
main=labelx)
lim <- par()
imagex = readPNG(paste("../data/images/",order[i],".png",sep=''))
rasterImage(imagex, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
}
dev.off()
}
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==0,]
makeExampleGrid(dx, '../results/graphs/examples/Gen0.pdf')
dx = finalLangs[finalLangs$Cond=="Communication" & finalLangs$Chain==1 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Communication.pdf')
dx = finalLangs[finalLangs$Cond=="Learn" & finalLangs$Chain==6 & finalLangs$Gen==6,]
makeExampleGrid(dx, '../results/graphs/examples/Gen6_Learn.pdf')
ratings = read.delim("../data/ratings/SpikinessRatings", sep='\t', stringsAsFactors = F)
max(ratings$Age)
min(ratings$Age)
table(ratings$Sex) / nrow(ratings)
library(gplots)
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
datax = read.csv("../results/IncreaseInIconicity.csv", stringsAsFactors = F)
alldatx = read.csv("../results/AllTrialData.csv", stringsAsFactors = F)
hist(datax$increaseIconicity)
hist(datax[datax$condition=='Comm',]$increaseIconicity)
hist(datax[datax$condition=='Learn',]$increaseIconicity)
comm.innovation.iconicity.dist = datax[datax$condition=='Comm' & datax$Human,]$increaseIconicity
learn.innovation.iconicity.dist = datax[datax$condition=='Learn' & datax$Human,]$increaseIconicity
wilcox.test(comm.innovation.iconicity.dist)
wilcox.test(learn.innovation.iconicity.dist)
symmetry.test(comm.innovation.iconicity.dist)
symmetry.test(learn.innovation.iconicity.dist)
dens.comm = density(datax[datax$condition=='Comm' & datax$Human,]$increaseIconicity, adjust=1)
dens.learn = density(datax[datax$condition=='Learn' & datax$Human,]$increaseIconicity,adjust=1)
plot(dens.comm, main='', xlab='Change in iconicity')
lines(dens.learn, col=2)
abline(v=0)
pdf(file='../results/graphs/IncreaseIconcity_ConditionByMeaningIsSpiky.pdf')
plotmeans(increaseIconicity ~ paste(condition,isSpikyMeaning), data=datax, connect=list(1:2,3:4))
dev.off()
pdf(file='../results/graphs/IncreaseIconcity_andSystematicity_ConditionByWordInFinalLanguage.pdf', width=10, height=4)
par(mfrow=c(1,2))
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"))
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(systematicity.increase ~ paste(condition, inFinalLang), data = datax[datax$Human,], connect = list(1:2,3:4), xlab='', ylab="Increase",, legends = c("Rejected","Survived","Rejected","Survived"))
title(main="Systematicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
dev.off()
colsppt = c("#288F62","#288F62","#CF4A08","#CF4A08")
plotmeans(increaseIconicity ~ paste(condition,inFinalLang), data=datax[datax$Human,], connect = list(1:2,3:4),xlab='', ylab="Increase", legends = c("Rejected","Survived","Rejected","Survived"), col = colsppt, pch=16, ccol = colsppt[c(1,3)], barcol = colsppt, barwidth = 2, n.label = F)
title(main="Iconicity")
axis(1,at=c(1.5,3.5),c("Communication","Reproduction"),line=1, tick=F)
abline(h=0)
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Learn' & !alldatx$Human,], n.label = F)
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Comm',],add=T,col=2,barcol=2, n.label = F)
ctrl = glmerControl(optCtrl = list(maxfun=50000))
m0 = glmer(correctGuess ~ 1 + (1|chain) + (1|target.meaning), data=alldatx[alldatx$condition=='Comm' | (!alldatx$Human),], family = binomial, control= ctrl)
m1 = glmer(correctGuess ~ condition + (1|chain) + (1|target.meaning), data=alldatx[alldatx$condition=='Comm' | (!alldatx$Human),], family = binomial, control= ctrl)
anova(m0,m1)
getMEText(anova(m0,m1),ef = "main effect of condition", summary(m1)$coef[2,])
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Learn' & alldatx$trial.nr >102 & !alldatx$Human,])
plotmeans(correctGuess~gen,alldatx[alldatx$condition=='Comm' & alldatx$trial.nr >102,],add=T,col=2,barcol=2)
plotmeans(correctSpikiness~gen,alldatx[alldatx$condition=='Comm',])
plotmeans(correctSpikiness~gen,alldatx[alldatx$condition=='Learn' & !alldatx$Human,],add=T,col=2,barcol=2)
###########
library(ggplot2)
p <- ggplot(datax, aes(factor(condition):factor(inFinalLang), increaseIconicity, fill=condition))
p + geom_violin() + stat_summary(fun.y=mean, geom="point", size=4, color="red")
p + geom_violin() + geom_boxplot(width=0.1) +
theme(text=element_text(size=20), legend.position="none") +
scale_y_continuous(name="Score ranking")+
scale_x_discrete(name="")+
scale_fill_grey(start = 0.55, end=0.8)
p <- ggplot(datax, aes(factor(condition):factor(inFinalLang), systematicity.increase, fill=condition))
p + geom_violin() + stat_summary(fun.y=mean, geom="point", size=4, color="red")
p + geom_violin() + geom_boxplot(width=0.1) +
theme(text=element_text(size=20), legend.position="none") +
scale_y_continuous(name="Score ranking")+
scale_x_discrete(name="")+
scale_fill_grey(start = 0.55, end=0.8)
###########
datax$condition = factor(datax$condition, levels=c("Learn","Comm"))
summary(lm(increaseIconicity ~ round+gen + condition*inFinalLang,data=datax))
plotmeans(increaseIconicity~gen, data=datax[datax$condition=='Comm' & datax$isSpikyMeaning==T & datax$inFinalLang,])
plotmeans(increaseIconicity~gen, data=datax[datax$condition=='Comm' & datax$isSpikyMeaning==F  & datax$inFinalLang,], add=T, col=2)
abline(h=0)
plotmeans(increaseIconicity~wordCountSameMeaning ,data=datax[datax$wordCountSameMeaning<4,])
abline(h=0)
summary(lm(increaseIconicity~wordCountSameMeaning*condition, data=datax[datax$wordCountSameMeaning<4,]))
plotmeans(increaseIconicity~cut(round,4), datax[datax$condition=='Learn',], ylim=c(-0.15,0.15))
plotmeans(increaseIconicity~cut(round,4), datax[datax$condition=='Comm',], ylim=c(-0.15,0.15),add=T, col=2, barcol = 2)
plotmeans(systematicity.increase~cut(round,4), datax[datax$condition=='Learn',])
plotmeans(systematicity.increase~cut(round,4), datax[datax$condition=='Comm',],add=T, col=2, barcol = 2)
pdf("../results/graphs/CorrectGuesses_byIncreaseIconicity.pdf", width=8, height=4)
par(mfrow=c(1,2))
ylimx = c(-0.045,0.045)
plotmeans(increaseIconicity ~ paste(condition, correctGuess), data = datax[datax$Human & datax$condition=="Comm",], ylim=ylimx, legends = c("Incorrect","Correct"),xlab='',ylab="Increase in iconicity")
title("Guessing Item")
abline(h=0)
plotmeans(increaseIconicity ~ paste(condition, correctSpikiness), data = datax[datax$Human& datax$condition=="Comm",], ylim=ylimx,legends = c("Incorrect","Correct"),xlab='',ylab="Increase in iconicity")
title("Guessing Shape")
abline(h=0)
dev.off()
m0 = lmer(increaseIconicity ~ 1 + (1|chain) + (1|gen), data=datax[datax$Human & datax$condition=="Comm",])
m1 = lmer(increaseIconicity ~ correctGuess + (1|chain) + (1|gen), data=datax[datax$Human & datax$condition=="Comm",])
m2 = lmer(increaseIconicity ~ correctGuess + correctSpikiness + (1|chain) + (1|gen), data=datax[datax$Human & datax$condition=="Comm",])
anova(m0,m1,m2)
summary(m2)
dens.commS = density(datax[datax$condition=='Comm',]$systematicity.increase)
dens.learnS = density(datax[datax$condition=='Learn',]$systematicity.increase)
plot(dens.commS, main='', xlab='Change in iconicity')
lines(dens.learnS, col=2)
abline(v=0)
hist(comm.innovation.iconicity.survived.dist, col=cols[1],
breaks=14,
border = cols[1],
main='',
xlab="Change in iconicity")
hist(comm.innovation.iconicity.rejected.dist, col=cols[1],
breaks=14,
border = cols[2],
main='',
xlab="Change in iconicity", add=T)
---
title: "The interactive origin of iconiciy: Mixed effects models"
output:
pdf_document:
toc: true
---
\newpage
# Introduction
This file contains an analysis of the spikiness ratings of the final output languages and the accuracy of guessing during the experiments.  The spikiness ratings are not bimodally disributed, so the analysis of spikiness ratings is done using both the continuous spikiness rating values and a binarised version of the ratings.
Note that in the main text, we refer to the two conditions as "communication" and "reproduction", while the data is coded as "communication" and "learning".
# Spikiness ratings
## Load libraries
```{r message=FALSE, warning=FALSE}
library(gplots)
library(lattice)
library(ggplot2)
library(lme4)
library(party)
library(sjPlot)
library(lawstat)
```
```{r echo=F}
setwd("~/Documents/MPI/MonicaIconicity/SelectionAnalysis/analysis/")
getMEText = function(r,ef, wald=NULL){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
begin = 'There was no significant'
if(p <0.1){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
## Load data
```{r}
finalLangs = read.csv("../data/finalLanguages/FinalLanguages.csv", stringsAsFactors = F)
# convert labels to English
finalLangs$Shape[finalLangs$Shape=="Picudo"] = "Spiky"
finalLangs$Shape[finalLangs$Shape=="Redondo"] = "Round"
# load all trial data
alldatx = read.csv("../results/AllTrialData.csv",stringsAsFactors = F)
```
Center spikiness ratings and re-level factors.
```{r}
finalLangs$RatedSpikiness.center =
finalLangs$RatedSpikiness- mean(finalLangs$RatedSpikiness)
finalLangs$Cond = factor(finalLangs$Cond, levels=c("Learn","Communication"))
finalLangs$Shape = factor(finalLangs$Shape, levels=c("Round","Spiky"))
```
Plot the data by item (all conditions, all generations)
```{r}
par(mar=c(8,4,2,2))
plotmeans(finalLangs$RatedSpikiness.center~finalLangs$Item, las=2, xlab="", connect=F)
```
There are differences between items
## Mixed effects model
Build a series of models with random effects for Chain and Item.
```{r}
# null model
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |Chain)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |Chain) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |Chain)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |Chain)
+ (1|Item), data=finalLangs)
head(finalLangs)
finalLangs$ChainGen = paste(finalLangs$Chain, finalLangs$Gen, finalLangs$Cond)
finalLangs$ChainGen = paste(finalLangs$Chain, finalLangs$Gen, finalLangs$Cond)
finalLangs$ChainGen = paste(finalLangs$Chain, finalLangs$Gen, finalLangs$Cond)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain/ChainGen/)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |Chain/ChainGen) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
anova(m0,m1,m2,m3,m4,m5,m6,m7)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
anova(m0,m1,m2,m3,m4,m5,m6,m7)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |ChainGen/Chain)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |ChainGen/Chain)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |ChainGen/Chain) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |ChainGen/Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |ChainGen/Chain)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |ChainGen/Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |ChainGen/Chain)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |ChainGen/Chain)
+ (1|Item), data=finalLangs)
anova(m0,m1,m2,m3,m4,m5,m6,m7)
finalLangs$ChainGen = paste(finalLangs$Chain, finalLangs$Gen, finalLangs$Cond)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |Chain/ChainGen) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
anova(m0,m1,m2,m3,m4,m5,m6,m7)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |Chain)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |Chain) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |Chain)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |Chain)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |Chain)
+ (1|Item), data=finalLangs)
```
### Results
Look inside main model
```{r}
summary(m7)
```
Test the differences between model fits.
```{r}
anova(m0,m1,m2,m3,m4,m5,m6,m7)
finalLangs$ChainGen = paste(finalLangs$Chain, finalLangs$Gen, finalLangs$Cond)
m0 = lmer(RatedSpikiness.center ~ 1 + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + condition
m1 = lmer(RatedSpikiness.center ~ Cond + (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + generation
m2 = lmer(RatedSpikiness.center ~ Cond + Gen + (1 |Chain/ChainGen) + (1|Item), data=finalLangs)
# + shape
m3 = lmer(RatedSpikiness.center ~ Cond + Gen + Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and generation
m4 = lmer(RatedSpikiness.center ~ Cond + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between condition and generation
m5 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
# + interaction between shape and condition
m6 = lmer(RatedSpikiness.center ~ (Cond*Gen) + (Gen * Shape) + (Shape:Cond)
+ (1 |Chain/ChainGen)  + (1|Item), data=finalLangs)
# + 3-way interaction
m7 = lmer(RatedSpikiness.center ~ Cond * Gen * Shape + (1 |Chain/ChainGen)
+ (1|Item), data=finalLangs)
anova(m0,m1,m2,m3,m4,m5,m6,m7)
ranef(m0)
ranef(m7)
